aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_area(data = subset(df, x > -z_alpha_half & x < z_alpha_half),
aes(x = x, y = y), fill = "blue", alpha = 0.2) +
geom_area(data = subset(df, x > -sd & x < sd),
aes(x = x, y = y), fill = "purple", alpha = 0.3) +
geom_vline(xintercept = mean, linetype = "solid", color = "black", size = 1.2) +  # Media
geom_vline(xintercept = c(mean - sd, mean + sd), linetype = "dashed", color = "black") +  # 1 SD
geom_vline(xintercept = c(mean - 2*sd, mean + 2*sd), linetype = "dotted", color = "black") +  # 2 SD
geom_vline(xintercept = c(mean - 3*sd, mean + 3*sd), linetype = "dotdash", color = "black") +  # 3 SD
annotate("text", x = mean, y = max(y), label = "μ", size = 6, vjust = -1.5, color = "black") +
labs(title = "Distribución Normal con Regiones de Rechazo y Desviaciones Estándar",
x = "Valores z",
y = "Densidad") +
theme_classic()
library(ggplot2)
# Parámetros
alpha <- 0.05  # Nivel de significancia
z_alpha_half <- qnorm(1 - alpha / 2)  # Valor crítico para dos colas
# Crear datos para la distribución normal
x <- seq(-4, 4, length = 1000)
y <- dnorm(x)
# Crear un data frame con los datos
df <- data.frame(x = x, y = y)
# Graficar la distribución normal y sombrear las regiones de rechazo
ggplot(df, aes(x = x, y = y)) +
geom_line(size = 1) +
# Sombrear las colas (regiones de rechazo) en rojo
geom_area(data = subset(df, x <= -z_alpha_half | x >= z_alpha_half),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
labs(title = "Distribución Normal con Regiones de Rechazo (Dos Colas)",
x = "Valores z",
y = "Densidad") +
theme_minimal()
# Graficar la distribución normal y sombrear las regiones de rechazo
ggplot(df, aes(x = x, y = y)) +
geom_line(size = 1) +
# Sombrear las colas (regiones de rechazo) en rojo
geom_area(data = subset(df, x <= -z_alpha_half | x >= z_alpha_half),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
labs(title = "Distribución Normal con Regiones de Rechazo (Dos Colas)",
x = "Valores z",
y = "Densidad") +
theme_minimal()
# Generar dos muestras de ejemplo
set.seed(123)
grupo1 <- rnorm(30, mean = 5, sd = 1)
grupo2 <- rnorm(30, mean = 6, sd = 1.5)
# Realizar la prueba t de dos muestras independientes
prueba_t <- t.test(grupo1, grupo2, var.equal = FALSE)
# Extraer valores de la prueba t
t_value <- prueba_t$statistic
df <- prueba_t$parameter  # Grados de libertad
alpha <- 0.05  # Nivel de significancia
# Gráfico de la distribución t
x <- seq(-4, 4, length = 1000)
y <- dt(x, df = df)
# 1. Caso de dos colas
t_critico <- qt(1 - alpha / 2, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x <= -t_critico | x >= t_critico),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = c(-t_critico, t_critico), linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Dos colas",
x = "Valores t",
y = "Densidad") +
theme_minimal()
# 2. Caso de una cola izquierda
t_critico_izquierda <- qt(alpha, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x <= t_critico_izquierda),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_izquierda, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola izquierda",
x = "Valores t",
y = "Densidad") +
theme_minimal()
# 3. Caso de una cola derecha
t_critico_derecha <- qt(1 - alpha, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x >= t_critico_derecha),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_derecha, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola derecha",
x = "Valores t",
y = "Densidad") +
theme_minimal()
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x >= t_critico_derecha),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_derecha, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola derecha",
x = "Valores t",
y = "Densidad") +
theme_classic()
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x <= t_critico_izquierda),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_izquierda, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola izquierda",
x = "Valores t",
y = "Densidad") +
theme_classic()
# Generar dos muestras de ejemplo
set.seed(123)
grupo1 <- rnorm(30, mean = 5, sd = 1)
grupo2 <- rnorm(30, mean = 6, sd = 1.5)
# Realizar la prueba t de dos muestras independientes
prueba_t <- t.test(grupo1, grupo2, var.equal = FALSE)
# Extraer valores de la prueba t
t_value <- prueba_t$statistic
df <- prueba_t$parameter  # Grados de libertad
alpha <- 0.05  # Nivel de significancia
# Gráfico de la distribución t
x <- seq(-4, 4, length = 1000)
y <- dt(x, df = df)
# 1. Caso de dos colas con las colas sombreadas
t_critico <- qt(1 - alpha / 2, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x <= -t_critico | x >= t_critico),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = c(-t_critico, t_critico), linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Dos colas (Colas sombreadas)",
x = "Valores t",
y = "Densidad") +
theme_minimal()
# 2. Caso de una cola izquierda
t_critico_izquierda <- qt(alpha, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x <= t_critico_izquierda),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_izquierda, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola izquierda",
x = "Valores t",
y = "Densidad") +
theme_minimal()
# 3. Caso de una cola derecha
t_critico_derecha <- qt(1 - alpha, df)
# Gráfico
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
geom_area(data = subset(data.frame(x, y), x >= t_critico_derecha),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_derecha, linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Una cola derecha",
x = "Valores t",
y = "Densidad") +
theme_minimal()
ggplot(data.frame(x, y), aes(x = x, y = y)) +
geom_line(size = 1) +
# Sombrear exclusivamente las colas
geom_area(data = subset(data.frame(x, y), x <= -t_critico),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_area(data = subset(data.frame(x, y), x >= t_critico),
aes(x = x, y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = c(-t_critico, t_critico), linetype = "dashed", color = "black") +
geom_vline(xintercept = t_value, color = "blue", linetype = "solid") +
labs(title = "Prueba t - Dos colas (Colas sombreadas exclusivamente)",
x = "Valores t",
y = "Densidad") +
theme_classic()
pacman::p_load(tidyverse, # Manipulacion datos
sjPlot, # Graficos y tablas
sjmisc, # Descriptivos
corrplot, # Correlaciones
psych, # Test estadísticos
kableExtra) # Tablas
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
# Cargar bbdd desde internet
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/issp_2009_chile.RData"))
names(issp) # Nombre de columnas
dim(issp) # Dimensiones
proc_issp <- issp %>% # seleccionamos
dplyr::select(educyrs,
income,
perc_ineq,
starts_with("conflict"))
proc_issp %>%
sjmisc::descr(show = c("label","range", "mean", "sd", "NA.prc", "n")) %>%
kable(.,"markdown")
sjmisc::frq(proc_issp$conflict_rp)
sjmisc::frq(proc_issp$perc_ineq)
cor.test(proc_issp$conflict_rp, proc_issp$perc_ineq, method = "spearman") #especificamos metodo spearman
cor.test(proc_issp$conflict_rp, proc_issp$perc_ineq, method = "kendall") #especificamos metodo kendall
proc_issp_original <- proc_issp
dim(proc_issp)
sum(is.na(proc_issp))
colSums(is.na(proc_issp))
proc_issp <- na.omit(proc_issp)
dim(proc_issp)
mean(proc_issp_original$conflict_rp); mean(proc_issp_original$perc_ineq)
mean(proc_issp_original$conflict_rp, na.rm = TRUE); mean(proc_issp_original$perc_ineq, na.rm = TRUE)
#matrices
M <- cor(proc_issp_original, use = "complete.obs")
M
sjPlot::tab_corr(proc_issp_original,
triangle = "lower")
sjPlot::tab_corr(proc_issp_original,
na.deletion = "pairwise", # espeficicamos tratamiento NA
triangle = "lower")
diag(M) <- NA
corrplot::corrplot(M,
method = "color",
addCoef.col = "black",
type = "upper",
tl.col = "black",
col = colorRampPalette(c("#E16462", "white", "#0D0887"))(12),
bg = "white",
na.label = "-")
M_psci <- proc_issp %>%
dplyr::select(starts_with("conflict"))
sjPlot::tab_corr(M_psci,
na.deletion = "listwise", # espeficicamos tratamiento NA
triangle = "lower")
alpha_psci <- psych::alpha(M_psci)
alpha_psci$total$raw_alpha
proc_issp <- cbind(proc_issp, "psci" = rowMeans(proc_issp %>% select(starts_with("conflict")), na.rm=TRUE))
sjmisc::descr(proc_issp$psci, show = c("range", "mean", "sd", "NA.prc", "n")) %>%
kable(.,"markdown")
cor.test(proc_issp$psci, proc_issp$perc_ineq, method = "pearson", use = "complete.obs")
b <- 2|3
class(b)
a <- c("totalmente de acuerdo", "de acuerdo", "en desacuerdo", "muy en desacuerdo")
a <- c("hola", 1)
class(a)
pacman::p_load(
tidyverse, # Manipulacion datos
sjPlot, # Graficos y tablas
sjmisc, # Descriptivos
kableExtra, # Tablas
psych, # Estadísticos
broom
) # Varios
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
# Cargar bbdd desde internet
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
proc_elsoc <- elsoc %>% # seleccionamos
dplyr::select(
ingreso,
ingreso_rec,
educ,
educ_rec,
starts_with("jv")
)
cor.test(proc_elsoc$jv_cambio_rec, proc_elsoc$ingreso)
matriz <- proc_elsoc %>%
dplyr::select(jv_cambio_rec, ingreso_rec) # creamos matriz con var de interes
psych::tetrachoric(matriz, na.rm = T)
proc_elsoc %>%
sjPlot::sjtab(ingreso_rec,
jv_cambio_rec,
show.row.prc = TRUE, # porcentaje fila
show.col.prc = TRUE # porcentaje columna
)
tab1 %>%
kable(format = "html", align = "r", col.names = c("Ingreso", "No justifica violencia", "Justifica violencia", "Total")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = T) %>%
kableExtra::kable_styling(latex_options = "hold_position", position = "center")
tab1 %>%
kable(format = "html", align = "r", col.names = c("Ingreso", "No justifica violencia", "Justifica violencia", "Total")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = T) %>%
kableExtra::kable_styling(latex_options = "hold_position", position = "center")
tab1 %>%
kable(format = "html", align = "r", col.names = c("Ingreso", "No justifica violencia", "Justifica violencia", "Total")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = T) %>%
kableExtra::kable_styling(latex_options = "hold_position", position = "center")
tab2 %>%
kable(format = "html", align = "r", col.names = c("Sentido (in)justicia", "No justifica violencia", "Justifica violencia", "Total")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = T) %>%
kableExtra::kable_styling(latex_options = "hold_position", position = "center")
frq(proc_elsoc$educ)
frq(proc_elsoc$jv_control_rec)
cor.test(proc_elsoc$educ, proc_elsoc$jv_control_rec)
#tabla de contignecia
proc_elsoc %>%
sjPlot::sjtab(educ,
jv_control_rec,
show.row.prc = TRUE, # porcentaje fila
show.col.prc = TRUE # porcentaje columna
)
# Guardar el test de chi cuadrado
chi_result <- chisq.test(proc_elsoc$educ, proc_elsoc$jv_control_rec)
n <- na.omit(proc_elsoc %>% select(educ, jv_control_rec)) %>% nrow()
chi_result
# Cálculo de Phi
phi <- sqrt(chi_result$statistic / n)
phi
qchi(p = .025, df = 29)
qchisq(p = .05, df = 22, lower.tail = FALSE)
qchisq(p = .05, df = 100, lower.tail = FALSE)
a <- "rtotlt", "ldd"
a <- "rtotlt"
a <- c("rtotlt", "ldd")
a <- c("totalmente de acuerdo", "de acuerdo", "en desacuerdo", "muy en desacuerdo")
class()
class(a)
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
pacman::p_load(
tidyverse, # Manipulacion datos
sjPlot, # Graficos y tablas
sjmisc, # Descriptivos
kableExtra, # Tablas
psych, # Estadísticos
broom,
dplyr
) # Varios
proc_elsoc <- elsoc %>% # seleccionamos
select(
ingreso,
ingreso_rec,
educ,
educ_rec,
starts_with("jv")
)
head(elsoc)
frq(proc_elsoc$educ)
table(proc_elsoc$educ)
# Cargar bbdd desde internet
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
proc_elsoc %>%
sjPlot::sjtab(ingreso_rec,
jv_cambio_rec,
show.row.prc = TRUE, # porcentaje fila
show.col.prc = TRUE # porcentaje columna
)
# ---- CHARACTER ----
grado_de_acuerdo_ch <-  c(“muy en desacuerdo”, “muy en desacuerdo”, “de acuerdo”,
pacman::p_load(tidyverse, #entorno de paquetes
dplyr,# Manipulacion datos
sjPlot, # Graficos y tablas
sjmisc, # Descriptivos
corrplot, # Correlaciones
psych, # Test estadísticos
kableExtra) # Tablas
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
# Cargar bbdd desde internet para las primeras tres:
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/issp_2009_chile.RData"))
# para las primeras tres:
proc_issp <- issp %>% # seleccionamos
dplyr::select(educyrs,
income,
perc_ineq,
starts_with("conflict"))
# Cargar bbdd desde internet para las ultimas dos:
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
# para las ultimas dos:
proc_elsoc <- elsoc %>% # seleccionamos
dplyr::select(
ingreso,
ingreso_rec,
educ,
educ_rec,
sexo,
starts_with("jv")
)
frq(proc_elsoc$ingreso)
frq(elsoc)
cor.test(proc_elsoc$educ_rec, proc_elsoc$ingreso)
frq(proc_elsoc$educ_rec)
frq(proc_elsoc$ingreso)
# 0 cargar librerias
pacman::p_load(tidyverse,
sjPlot,
sjmisc,
kableExtra,
psych,
corrplot,
broom,
car)
datos <- elsoc %>% select(educ_rec,ingreso)
proc_elsoc <- elsoc %>% select(ingreso,
ingreso_rec,
educ,
educ_rec,
sexo,
starts_with("jv"))
View(elsoc)
# 1. cargar datos
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
proc_elsoc <- elsoc %>% select(ingreso,
ingreso_rec,
educ,
educ_rec,
sexo,
starts_with("jv"))
# verificar el nivel de medicion de las variables
frq(proc_elsoc$educ_rec)
frq(proc_elsoc$ingreso)
cor.test(proc_elsoc$educ_rec, proc_elsoc$ingreso)
cor.test(proc_elsoc$educ_rec, proc_elsoc$ingreso)
frq(proc_elsoc$ingreso_rec)
frq(proc_elsoc$jv_cambio_rec)
chi_results <- chisq.test(proc_elsoc$ingreso_rec, proc_elsoc$jv_cambio_rec)
chi_results
# calculamos la correlacion para una muestra aleatoria de 1000 casos
cor.test(issp_subset1$conflict_rp, issp_subset1$perc_ineq, method = "kendall") #especificamos metodo kendall
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "kendall")
pacman::p_load(tidyverse, #entorno de paquetes
dplyr,# Manipulacion datos
sjPlot, # Graficos y tablas
sjmisc, # Descriptivos
corrplot, # Correlaciones
psych, # Test estadísticos
kableExtra) # Tablas
options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
# Cargar bbdd desde internet para las primeras tres:
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/issp_2009_chile.RData"))
# Cargar bbdd desde internet para las ultimas dos:
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/elsoc2019_jv.RData"))
# para las primeras tres:
proc_issp <- issp %>% # seleccionamos
dplyr::select(educyrs,
income,
perc_ineq,
starts_with("conflict"))
# para las ultimas dos:
proc_elsoc <- elsoc %>% # seleccionamos
dplyr::select(
ingreso,
ingreso_rec,
educ,
educ_rec,
sexo,
starts_with("jv")
)
correlacion <- cor(proc_elsoc$ingreso,
proc_elsoc$educ,
use = "complete.obs")
print(correlacion)
# coeficiente de determinacion:
coef_det <- cor_results^2
coef_det*100
(cor_results^2)*100
# subset 1
issp_subset1 <- proc_issp %>%
select(conflict_rp, perc_ineq) %>% # seleccionamos
sample_n(1000) # extraemos una muestra de 1000 casos
# seubset 2
issp_subset2 <- proc_issp %>%
select(conflict_rp, perc_ineq) %>% # seleccionamos
sample_n(500) # extraemos una muestra de 1000 casos
# calculamos la correlacion para una muestra aleatoria de 1000 casos
cor.test(issp_subset1$conflict_rp, issp_subset1$perc_ineq, method = "spearman") #especificamos metodo spearman
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "spearman")
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "spearman")
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "spearman")
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "spearman")
# calculamos la correlacion para otra muestra aleatoria de 500 casos
cor.test(issp_subset2$conflict_rp, issp_subset2$perc_ineq, method = "spearman")
# calculamos la correlacion para una muestra aleatoria de 1000 casos
cor.test(issp_subset1$conflict_rp, issp_subset1$perc_ineq, method = "spearman") #especificamos metodo spearman
# calculamos la correlacion para una muestra aleatoria de 1000 casos
cor.test(issp_subset1$conflict_rp, issp_subset1$perc_ineq, method = "kendall") #especificamos metodo kendall
cor.test(proc_elsoc$jv_cambio_rec, proc_elsoc$ingreso)
matriz <- proc_elsoc %>%
dplyr::select(jv_cambio_rec, ingreso_rec) # creamos matriz con var de interes
psych::tetrachoric(matriz, na.rm = T)
# librerías
pacman::p_load(dplyr, sjPlot, sjmisc)
load("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/dataset2.RData")
# librerías
pacman::p_load(dplyr, sjPlot, sjmisc)
load("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/dataset2.RData")
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/dataset2.RData"))
cor.test(dataset1$ingresos, dataset1$autoritarismo, complete.obs = TRUE, method = "pearson")
load(url("https://github.com/cursos-metodos-facso/datos-ejemplos/raw/refs/heads/main/dataset1.RData"))
cor.test(dataset1$ingresos, dataset1$autoritarismo, complete.obs = TRUE, method = "pearson")
sjPlot::plot_scatter(data = dataset1, x = ingresos, y = autoritarismo)
cormat <- dataset1 %>%
dplyr::select(educ_rec, autoritarismo, ingresos)
sjPlot::tab_corr(cormat,
na.deletion = "pairwise", # espeficicamos tratamiento NA
triangle = "lower")
pacman::p_load(sjPlot)
pacman::p_load(sjPlot)
dataset1 %>%
sjtab(educ_rec,
ingresos_rec)
chisq.test(dataset1$educ_rec, dataset1$ingresos_rec) # adicional, ya que el Chi2 aparece en sjtab
180+51
231+162
305+92
